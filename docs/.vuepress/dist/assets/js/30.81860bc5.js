(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{376:function(t,a,e){"use strict";e.r(a);var s=e(42),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"webpack"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[t._v("#")]),t._v(" webpack")]),t._v(" "),e("p",[t._v("webpack是一个资源打包工具。"),e("br"),t._v("\n打包原理：识别入口文件，根据模块间的依赖关系进行静态分析，CommonJs、AMD、es6的import都会分析，然后按照指定规则生成静态资源。")]),t._v(" "),e("h2",{attrs:{id:"plugin-和-loader"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#plugin-和-loader"}},[t._v("#")]),t._v(" plugin 和 loader")]),t._v(" "),e("p",[t._v("两者都是为了扩展webpack的功能。")]),t._v(" "),e("h3",{attrs:{id:"loader"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#loader"}},[t._v("#")]),t._v(" loader")]),t._v(" "),e("p",[t._v("主要功能：转换文件，压缩，打包，翻译。"),e("br"),t._v("\n因为webpack只能打包CommonJs规范的js文件，对于css,图片等格式的文件需要借助loader进行打包。loader运行在NodeJs上，运行在打包文件之前。")]),t._v(" "),e("p",[e("strong",[t._v("常见loader")]),e("br"),t._v("\ncss-loader:遍历CSS文件，找到url()表达式然后进行处理"),e("br"),t._v("\nstyle-loader：把CSS代码插入到页面的style标签中"),e("br"),t._v("\nbabel-loader：将es6的语法转换成es5的语法\nvue-loader: 提供HMR(页面热更新)解决方案")]),t._v(" "),e("p",[t._v("可在webpack.config.js中配置")]),t._v(" "),e("h3",{attrs:{id:"plugin"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#plugin"}},[t._v("#")]),t._v(" plugin")]),t._v(" "),e("p",[t._v("plugin功能更加丰富，主要有：打包优化，压缩，重新定义环境变量等功能，还能携带参数，在整个编译周期都有运行，不直接操作文件，而是监听打包进程的某些节点。")]),t._v(" "),e("p",[e("strong",[t._v("常见plugin")]),e("br"),t._v("\nHotModuleReplacementPlugin: 页面热更新"),e("br"),t._v("\nUglifyJSPlugin: 压缩JS代码"),e("br"),t._v("\nhtml-webpack-plugin:自动打包生成html"),e("br"),t._v("\nextract-text-webpack-plugin: 提取样式到css文件中（webpack4之前引用）"),e("br"),t._v("\nmini-css-extract-plugin: 提取样式到css文件中（webpack4及以上版本使用）。优化：按需加载css"),e("br"),t._v("\noptimize-css-assets-webpack-plugin: 压缩css文件")]),t._v(" "),e("h3",{attrs:{id:"webpack4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webpack4"}},[t._v("#")]),t._v(" webpack4")]),t._v(" "),e("p",[t._v("优化：")]),t._v(" "),e("ol",[e("li",[t._v("使用mode来优化配置文件。production模式下可以减少代码体积，删除只在开发环境下用的代码，development模式下可以节约构建时间")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("    module"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        mode"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'production'")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//development")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("移除commonchunk插件，使用optimization配置。"),e("br"),t._v("\n改动：")])]),t._v(" "),e("ul",[e("li",[t._v("获取vendor和manifest的方式。原先配置两次new webpack.optimize.CommonsChunkPlugin来获取，现在直接在optimization中配置runtimeChunk和splitChunks。")]),t._v(" "),e("li",[t._v("去除webpack.optimize.UglifyJsPlugin,只需配置optimization.minimize为true")])]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("mini-css-extract-plugin替代extract-text-webpack-plugin")]),t._v(" "),e("li",[t._v("部分插件升级")])])])}),[],!1,null,null,null);a.default=n.exports}}]);