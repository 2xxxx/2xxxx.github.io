(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{379:function(t,s,n){"use strict";n.r(s);var a=n(42),v=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"http协议"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#http协议"}},[t._v("#")]),t._v(" http协议")]),t._v(" "),n("p",[t._v("http是超文本传输协议，用于客户端和服务器之间的通信，默认80端口用明文进行传输。"),n("br"),t._v("\n一个http请求报文由"),n("br"),t._v(" "),n("strong",[t._v("请求行")]),t._v("(请求方法、URL 、 协议版本)、"),n("br"),t._v(" "),n("strong",[t._v("请求头部")]),t._v("(Host:服务器地址、User-Agent:发送请求的应用程序名称、Connection:指定与连接相关的属性、Accept-Charset:可接收的编码格式、Accept-Encoding:可接收的数据压缩格式、Accept-Language:可接收语言)、"),n("br"),t._v(" "),n("strong",[t._v("请求数据")]),t._v("(在POST中使用)组成\n请求头：")]),t._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[t._v("GET /HTTP/"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v("        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//协议版本")]),t._v("\nUser-Agent"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Mozilla/"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.0")]),t._v(" (Windows NT "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6.1")]),t._v("; WOW64) AppleWebKit/"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("537.36")]),t._v(" (KHTML"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" like Gecko) Chrome/"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("84.0")]),t._v("."),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4147.135")]),t._v(" Safari/"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("537.36")]),t._v("  \nAccept"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" *"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*     //接收格式\n")])])])]),n("p",[n("strong",[t._v("请求方法")]),t._v("\nhttp/1.1定义的请求方法有8中："),n("code",[t._v("GET")]),t._v("(完整请求一个资源),"),n("code",[t._v("POST")]),t._v("(提交表单),"),n("code",[t._v("PUT")]),t._v("(上传文件)，"),n("code",[t._v("DELETE")]),t._v("(删除),"),n("code",[t._v("PATCH")]),t._v("、"),n("code",[t._v("HEAD")]),t._v("(仅请求响应头部)，"),n("code",[t._v("OPTIONS")]),t._v("(返回请求的资源所支持的方法)，"),n("code",[t._v("TRACE")]),t._v("(追踪一个资源请求中间所经过的代理)。"),n("br"),t._v("\n其中常用的是GET和POST，GET和POST的区别：")]),t._v(" "),n("ol",[n("li",[t._v("GET将参数包含在URL中，而POST通过requet body传递参数；")]),t._v(" "),n("li",[t._v("GET请求只能进行url编码，而POST支持多种编码格式;")]),t._v(" "),n("li",[t._v("GET请求传送的参数有大小限制，不能大于2kb，post没有；")]),t._v(" "),n("li",[t._v("浏览器执行XMLRequest Post请求时分两步，先发HTTP Header,再发data，要发两个TCP数据包，得发两次。而GET只用一个TCP数据包("),n("code",[t._v("header+data")]),t._v(") 发送数据。（ps:火狐POST时只发送一次）")])]),t._v(" "),n("p",[t._v("响应报文由"),n("br"),t._v(" "),n("strong",[t._v("状态行")]),t._v("(协议版本、状态码、状态码描述)、"),n("br"),t._v(" "),n("strong",[t._v("响应头部")]),t._v("(Server: 服务器应用程序软件的名称和版本、Content-Type: 响应数据类型、Content-Length:长度、Content-Charset:数据使用的编码、Content-Encoding:数据的压缩格式、Content-Language:使用的语言)、"),n("br"),t._v(" "),n("strong",[t._v("响应数据")]),t._v("组成")]),t._v(" "),n("p",[t._v("回应头：")]),t._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[t._v("HTTP/"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(" 200OK    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//状态码")]),t._v("\nContent-Type"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" image/gif\nContent-Length"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("43")]),t._v("\nExpires"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("Thu"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("05")]),t._v(" Dec "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1997")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("00")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("00")]),t._v(" GMT  \nLast-Modified"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Wed"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" August "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1996")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("55")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("28")]),t._v(" GMT\nServer"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Apache "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.84")]),t._v("\n")])])]),n("p",[n("strong",[t._v("Expires")]),t._v("和"),n("strong",[t._v("Last-modified")]),t._v("是"),n("a",{attrs:{href:"../browser/storage"}},[t._v("浏览器缓存")]),t._v("中强缓存和协商缓存的判断依据。")]),t._v(" "),n("p",[t._v("不足：每个TCP连接只能发送一个请求，TCP连接每次都要经过三次握手和四次挥手，连接成本较高，导致http1.0版本性能较差。"),n("br"),t._v("\n为了解决上述问题，可以在请求头加上"),n("code",[t._v("Connection:keep-alive")]),t._v("(非标准字段),要求服务器不要关闭TCP连接，实现TCP复用，知道客户端通知服务器关闭连接。")]),t._v(" "),n("h2",{attrs:{id:"http1-1"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#http1-1"}},[t._v("#")]),t._v(" http1.1")]),t._v(" "),n("p",[t._v("http/1.1版本进一步完善了http协议。做出许多改进：")]),t._v(" "),n("ol",[n("li",[n("strong",[t._v("持久连接")]),t._v("。1.1版本默认不关闭TCP连接，可以复用，当需要关闭时，客户端发送"),n("code",[t._v("Connection:close")]),t._v("字段。"),n("br"),t._v("\n同一个域名，大多浏览器最多允许同时建立6个连接")]),t._v(" "),n("li",[n("strong",[t._v("管道机制")]),t._v("。同一个TCP连接内，客户端可以同时发送多个请求，服务端按请求的先后顺序依次回应请求。之前是要等前一个请求回复后才能再发送请求，这样将大大提高效率。")]),t._v(" "),n("li",[n("strong",[t._v("Content-Length")]),t._v("。表示服务端回复数据的长度，在TCP的多个响应中区分数据包对应哪个响应。")]),t._v(" "),n("li",[n("strong",[t._v("分块传输编码")]),t._v("。数据分块发送，提高发送效率。由头信息中"),n("code",[t._v("Transfer-Encoding:chunked")]),t._v("判断。")]),t._v(" "),n("li",[t._v("其他。\n"),n("ul",[n("li",[t._v("新增"),n("code",[t._v("PUT")]),t._v("、"),n("code",[t._v("PATCH")]),t._v("、"),n("code",[t._v("HEAD")]),t._v("、"),n("code",[t._v("OPTIONS")]),t._v("、"),n("code",[t._v("DELETE")])]),t._v(" "),n("li",[t._v("请求头新增"),n("code",[t._v("HOST")]),t._v("字段，指定服务器域名。")])])])]),t._v(" "),n("p",[t._v("不足：可能导致"),n("strong",[t._v("队头阻塞")]),t._v("，虽然1.1是可以同时发送，但是响应是回复完一个再回复下一个，若当前回复过慢，就会造成后续阻塞。")]),t._v(" "),n("h2",{attrs:{id:"http2-0"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#http2-0"}},[t._v("#")]),t._v(" http2.0")]),t._v(" "),n("p",[t._v("特点：")]),t._v(" "),n("ol",[n("li",[n("strong",[t._v("二进制协议")]),t._v("。头信息和数据体都是二进制，二进制传输代替明文传输，报文消息划为数据帧，帧是数据最小的传输单位。")]),t._v(" "),n("li",[n("strong",[t._v("多路复用")]),t._v("。在一个TCP连接中，客户端和服务端可以同时发送响应多个请求，不用按顺序，避免了队头阻塞。"),n("br"),t._v("\n原理：每个请求都是一个数据流，响应数据会划分成更小的单位帧，每帧都会携带数据流的stream indentifier标识，在一个TCP连接上，可以不断发送帧，客户端接收后会根据stream indentifier来拼接，确定是哪一个请求的回复")]),t._v(" "),n("li",[n("strong",[t._v("头信息压缩")]),t._v("。"),n("br"),t._v("\n原因：http协议没有状态，每次请求会带上所有信息，会造成字段重复。"),n("br"),t._v("\n优化： 头信息使用"),n("code",[t._v("gzip")]),t._v("或 "),n("code",[t._v("compress")]),t._v("压缩后再发送；客户端与服务器同时维护一张头信息表，里面存有所有字段，生成索引，发送请求时就发送索引。"),n("br"),t._v("\n4."),n("strong",[t._v("服务器推送")]),t._v("。服务器主动向客户端发送资源。"),n("br"),t._v("\n使用场景：客户端请求资源后，服务器主动推送相关资源，这样客户端就无需再发送后续请求。")])]),t._v(" "),n("p",[n("strong",[t._v("提问")]),t._v("，http1.x可以实现多路复用吗？\n不能。")]),t._v(" "),n("ol",[n("li",[t._v("http1.x是序列和阻塞机制，一次执行一个请求，如果前一个请求处理事件过长，会阻塞后一个请求的处理；")]),t._v(" "),n("li",[t._v("http1.x是文本传输，而不是二进制传输，没有流的概念，倘若有多路请求，无法区分哪个响应对应哪个请求，也就无法进行多路复用")])]),t._v(" "),n("p",[t._v("HTTP2可以多路复用，\n多路复用归功于， HTTP/2 中的 帧（frame）和流（stream）。帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流。就是在一个 TCP 连接中可以存在多条流。\n而Http 1.x 并没有这个标识")]),t._v(" "),n("h2",{attrs:{id:"http3-0"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#http3-0"}},[t._v("#")]),t._v(" http3.0")]),t._v(" "),n("p",[t._v("http3.0（QUIC）传输将使用UDP协议，因为UDP传输不需要连接且传输速度快，对于传输不可靠的问题，会在外层再重新封装。")]),t._v(" "),n("h2",{attrs:{id:"https"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[t._v("#")]),t._v(" https")]),t._v(" "),n("p",[t._v("https是经过SSL或TLS加密过的协议，是以安全为目标的http协议。"),n("br"),t._v("\n优点：")]),t._v(" "),n("ol",[n("li",[t._v("加密后传输，更加安全；")]),t._v(" "),n("li",[t._v("在谷歌浏览器中,https协议的网站搜索排名更高。")])]),t._v(" "),n("p",[t._v("缺点：")]),t._v(" "),n("ol",[n("li",[t._v("加载时间会比http协议的网站更长")])]),t._v(" "),n("p",[n("strong",[t._v("https握手过程")])]),t._v(" "),n("ol",[n("li",[t._v("与服务器建立443端口连接")]),t._v(" "),n("li",[t._v("SSL加密")]),t._v(" "),n("li",[t._v("发送加密请求")]),t._v(" "),n("li",[t._v("发送加密响应")]),t._v(" "),n("li",[t._v("关闭SSL")]),t._v(" "),n("li",[t._v("关闭TCP连接"),n("br"),t._v("\n详细：")])]),t._v(" "),n("ul",[n("li",[t._v("客户端发送浏览器支持的加密方式与一个随机数给服务端")]),t._v(" "),n("li",[t._v("服务端接收后返回一个随机数并根据客户端提供的加密方式运用公钥对随机数进行加密，并且把公钥对应的数字证书一起发送给客户端。")]),t._v(" "),n("li",[t._v("客户端接收后向证书中心(一般内置在浏览器中)验证数字证书是否有效，并获取对应公钥，再用公钥加密一个随机数发给服务端。")]),t._v(" "),n("li",[t._v("服务端收到后用自己的私钥进行解密，并用双方约定的加密方式加密三次互发的随机数生成对话密钥，之后两端对话就用该对话密钥加密。"),n("br"),t._v("\n客户端与服务端连接使用的是非对称加密，对话使用的是对称加密。")])]),t._v(" "),n("p",[n("strong",[t._v("如何劫持https的请求")])]),t._v(" "),n("ol",[n("li",[t._v("在客户端去请求域名对应IP时，"),n("strong",[t._v("对DNS解析进行拦截")]),t._v("，返回黑客伪造的IP给客户端，客户端会访问到黑客伪造的网站。")]),t._v(" "),n("li",[n("strong",[t._v("攻破CA机构的证书服务器，伪造一套SSL秘钥对和证书")]),t._v("，https连接时服务端将伪造的数字证书发送给客户端，与之进行连接，一般来说是无法攻破的。")])]),t._v(" "),n("h2",{attrs:{id:"websocket"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#websocket"}},[t._v("#")]),t._v(" websocket")]),t._v(" "),n("p",[t._v("依赖于TCP协议，通过HTTP1.1协议的101状态码进行握手。是属于全双工类型通信，客户端和服务端双方都能主动发送。传输格式有数据、文本、二进制。"),n("br"),t._v("\n四个阶段：onopen,onmessage,onclose,onerror")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ws "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Websocket")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("ws://")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("hostname"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("port"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("/websocket")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nws"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("open")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//连接成功")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nws"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onmessage")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//接收服务端返回的数据")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nws"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onerror")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//报错")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nws"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onclose")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//关闭连接")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nws"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//发送请求")]),t._v("\n")])])]),n("p",[t._v("优点：")]),t._v(" "),n("ol",[n("li",[t._v("消息实时")]),t._v(" "),n("li",[t._v("是一种有状态的协议，通信时可省略部分状态信息")]),t._v(" "),n("li",[t._v("支持二进制")])]),t._v(" "),n("h2",{attrs:{id:"状态码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#状态码"}},[t._v("#")]),t._v(" 状态码")]),t._v(" "),n("p",[n("strong",[t._v("状态码类型")]),t._v("：")]),t._v(" "),n("ol",[n("li",[n("code",[t._v("1**")]),t._v("：信息。服务器收到请求，并需要用户继续操作")]),t._v(" "),n("li",[n("code",[t._v("2**")]),t._v(": 成功。")]),t._v(" "),n("li",[n("code",[t._v("3**")]),t._v(": 重定向。")]),t._v(" "),n("li",[n("code",[t._v("4**")]),t._v(": 客户端错误。")]),t._v(" "),n("li",[n("code",[t._v("5**")]),t._v("：服务器错误。")])]),t._v(" "),n("p",[n("strong",[t._v("常用状态码")])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("状态码")]),t._v(" "),n("th",[t._v("名称")]),t._v(" "),n("th",[t._v("描述")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("101")]),t._v(" "),n("td",[t._v("Switching Protocols")]),t._v(" "),n("td",[t._v("切换协议")])]),t._v(" "),n("tr",[n("td",[t._v("200")]),t._v(" "),n("td",[t._v("Ok")]),t._v(" "),n("td",[t._v("请求成功")])]),t._v(" "),n("tr",[n("td",[t._v("204")]),t._v(" "),n("td",[t._v("No Content")]),t._v(" "),n("td",[t._v("无内容")])]),t._v(" "),n("tr",[n("td",[t._v("301")]),t._v(" "),n("td",[t._v("Moved Permanently")]),t._v(" "),n("td",[t._v("永久重定向")])]),t._v(" "),n("tr",[n("td",[t._v("302")]),t._v(" "),n("td",[t._v("Found")]),t._v(" "),n("td",[t._v("临时重定向")])]),t._v(" "),n("tr",[n("td",[t._v("400")]),t._v(" "),n("td",[t._v("Bad Request")]),t._v(" "),n("td",[t._v("客户端请求有语法错误，服务器无法理解")])]),t._v(" "),n("tr",[n("td",[t._v("401")]),t._v(" "),n("td",[t._v("Unauthorized")]),t._v(" "),n("td",[t._v("用户未鉴权，需要认证身份")])]),t._v(" "),n("tr",[n("td",[t._v("403")]),t._v(" "),n("td",[t._v("Forbidden")]),t._v(" "),n("td",[t._v("服务端拒绝执行请求，大概率是因为没有权限")])]),t._v(" "),n("tr",[n("td",[t._v("404")]),t._v(" "),n("td",[t._v("Not Found")]),t._v(" "),n("td",[t._v("资源未找到")])]),t._v(" "),n("tr",[n("td",[t._v("500")]),t._v(" "),n("td",[t._v("Internal Server Error")]),t._v(" "),n("td",[t._v("服务器内部错误")])]),t._v(" "),n("tr",[n("td",[t._v("503")]),t._v(" "),n("td",[t._v("Service Unavailable")]),t._v(" "),n("td",[t._v("由于超载或者系统维护，服务端暂时无法处理请求")])])])]),t._v(" "),n("p",[t._v("301与302的差异："),n("br"),t._v("\n301永久重定向，使用场景是网站需要更换域名。客户端和搜索引擎可以对跳转后的地址进行缓存，下一次不必发这个请求。"),n("br"),t._v("\n302临时重定向，使用场景是首页临时改为活动页等等。客户端必须请求原链接")]),t._v(" "),n("p",[t._v("ps:尽量使用301跳转，302有网址劫持的隐患，\n由于302语义不明确，http1.1又针对302细化出了303和307，区别是：当用POST请求新的URL时，303会直接改用为GET方法请求，307会询问用户是否用GET请求；当用GET请求新的URL时，两者表现一样。")])])}),[],!1,null,null,null);s.default=v.exports}}]);